package object.p2pipcam.adapter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


import object.p2pipcam.client.R;
import object.p2pipcam.content.ContentCommon;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

public class CameraListAdapter extends BaseAdapter {
	

	private static final String LOG_TAG = "CameraListAdapter" ;	
	
	private LayoutInflater listContainer = null;
	@SuppressWarnings("unused")
	private Context context = null;
	private List<Map<String, Object>> listItems = new ArrayList<Map<String, Object>>();;
	
	public final class CameraListItem{    
		public ImageView imgSnapShot;
	    public TextView devName;      
	    public TextView devID;    
	    public TextView devType;
	    public TextView devStatus;
	}    
	
	public CameraListAdapter(Context ct){
		context = ct;
		listContainer = LayoutInflater.from(ct);   
	}

	@Override
	public int getCount() {
		// TODO Auto-generated method stub
		int size;
		synchronized(this){
			size = listItems.size();
		}
		return size;
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		// TODO Auto-generated method stub
		synchronized(this){
			CameraListItem  cameraListItem = null; 		
			if(convertView == null){
				cameraListItem = new CameraListItem();  
				convertView = listContainer.inflate(R.layout.camera_list_item, null);    
				cameraListItem.imgSnapShot = (ImageView)convertView.findViewById(R.id.imgSnapshot);
				cameraListItem.devName = (TextView)convertView.findViewById(R.id.cameraDevName) ;
				cameraListItem.devID = (TextView)convertView.findViewById(R.id.cameraDevID) ;
				cameraListItem.devType = (TextView)convertView.findViewById(R.id.textPPPPMode);
				cameraListItem.devStatus = (TextView)convertView.findViewById(R.id.textPPPPStatus);
				convertView.setTag(cameraListItem);
			}else{
				cameraListItem = (CameraListItem)convertView.getTag();
			}		
			//System.out.println("getView... position: " + position);
			Drawable drawable = (Drawable)listItems.get(position).get(ContentCommon.STR_CAMERA_SNAPSHOT);
			if(drawable != null){
				//System.out.println("drawable != null getView... position: " + position);
				cameraListItem.imgSnapShot.setBackgroundDrawable(drawable);
			}else{
				cameraListItem.imgSnapShot.setBackgroundResource(R.drawable.back);
			}
			
			Map<String, Object> mapItem = listItems.get(position);			
			cameraListItem.devName.setText((String)mapItem.get(ContentCommon.STR_CAMERA_NAME));
			cameraListItem.devID.setText((String)mapItem.get(ContentCommon.STR_CAMERA_ID));
			
			int mode = (Integer)mapItem.get(ContentCommon.STR_CAMERA_TYPE);
			int p2p_mode = R.string.pppp_mode_unknown;
			switch(mode){
			case ContentCommon.PPPP_MODE_P2P_NORMAL:
				p2p_mode = R.string.pppp_mode_p2p_normal;
				break;
			case ContentCommon.PPPP_MODE_P2P_RELAY:
				p2p_mode = R.string.pppp_mode_p2p_relay;
				break;
			default:
				p2p_mode = R.string.pppp_mode_unknown;
				break;				
			}
			
			cameraListItem.devType.setText(p2p_mode);
			
			int status = (Integer)mapItem.get(ContentCommon.STR_PPPP_STATUS);
			int resid;
			switch(status){
			case ContentCommon.PPPP_STATUS_CONNECTING:
				resid = R.string.pppp_status_connecting;
				break;
			case ContentCommon.PPPP_STATUS_CONNECT_FAILED:
				resid = R.string.pppp_status_connect_failed;
				break;
			case ContentCommon.PPPP_STATUS_DISCONNECT:
				resid = R.string.pppp_status_disconnect;
				break;
			case ContentCommon.PPPP_STATUS_INITIALING:
				resid = R.string.pppp_status_initialing;
				break;
			case ContentCommon.PPPP_STATUS_INVALID_ID:
				resid = R.string.pppp_status_invalid_id;
				break;
			case ContentCommon.PPPP_STATUS_ON_LINE:
				resid = R.string.pppp_status_online;
				break;
			case ContentCommon.PPPP_STATUS_DEVICE_NOT_ON_LINE:
				resid = R.string.device_not_on_line;
				break;
			case ContentCommon.PPPP_STATUS_CONNECT_TIMEOUT:
				resid = R.string.pppp_status_connect_timeout;
				break;
			default:
				resid = R.string.pppp_status_unknown;
			}
			cameraListItem.devStatus.setText(resid);
		}
		return convertView;
	}
	
	/**
	 * 向搜索列表中添加摄像机
	 * @param mac
	 * @param ipaddr
	 * @param port
	 */
	public boolean AddCamera(String name, String did, String user, String pwd){
		
		//如果摄像机MAC重复，则不添加到列表中
		if(!CheckCameraInfo(did)){
			return false;
		}
		
		Map<String, Object> map = new HashMap<String, Object>(); 
		map.put(ContentCommon.STR_CAMERA_SNAPSHOT, (Drawable)null);
		map.put(ContentCommon.STR_CAMERA_NAME, name);
		map.put(ContentCommon.STR_CAMERA_ID, did);		
		map.put(ContentCommon.STR_CAMERA_USER, user);
		map.put(ContentCommon.STR_CAMERA_PWD, pwd) ;
		map.put(ContentCommon.STR_CAMERA_TYPE, ContentCommon.PPPP_MODE_UNKNOWN);
		map.put(ContentCommon.STR_PPPP_STATUS, ContentCommon.PPPP_STATUS_UNKNOWN);
		
		synchronized(this){
			listItems.add(map) ;
		}
		
		return true;
	}
	
	/**
	 * 
	 * @param did
	 * @param status
	 * @return
	 */
	public boolean UpdataCameraStatus(String did, int status){	
		//Log.d(LOG_TAG, "UpdataCameraStatus... did: " + did + " status: " + status);
		synchronized(this){
			int size = listItems.size();
			int i;
			for(i = 0; i < size; i++){
				Map<String, Object> mapItem = listItems.get(i);
				String strDID = (String)mapItem.get(ContentCommon.STR_CAMERA_ID);
				if(did.equals(strDID)){
					int _status = (Integer)mapItem.get(ContentCommon.STR_PPPP_STATUS);
					if(_status == status){
						return false;
					}
					mapItem.put(ContentCommon.STR_PPPP_STATUS, status);
					return true;
				}
			}
			return false;
		}
	}
	
	/**
	 * 
	 * @param did
	 * @param type
	 * @return
	 */
	public boolean UpdataCameraType(String did, int type){		
		synchronized(this){
			int size = listItems.size();
			int i;
			for(i = 0; i < size; i++){
				Map<String, Object> mapItem = listItems.get(i);
				String strDID = (String)mapItem.get(ContentCommon.STR_CAMERA_ID);
				if(did.equals(strDID)){
					int _type = (Integer)mapItem.get(ContentCommon.STR_CAMERA_TYPE);
					if(_type == type){
						return false;
					}
					mapItem.put(ContentCommon.STR_CAMERA_TYPE, type);
					return true;
				}
			}
			return false;
		}
	}

	/**
	 * 检查是否重复
	 * @param mac
	 * @return
	 */
	private boolean CheckCameraInfo(String did) {
		// TODO Auto-generated method stub
		//遍历列表，检查是否有相同mac地址的摄像机
		synchronized(this){
			int size = listItems.size();
			int i;
			for(i = 0; i < size; i++){
				String strdid = (String)listItems.get(i).get(ContentCommon.STR_CAMERA_ID);
				if(strdid.equals(did)){
					return false;
				}
			}
			return true;
		}
	}

	public Map<String, Object> getItemContent(int pos) {
		// TODO Auto-generated method stub
		synchronized(this){
			if(pos > listItems.size()){
				return null;
			}
			
			Map<String, Object> mapItem = listItems.get(pos) ;	
			String name = (String)mapItem.get(ContentCommon.STR_CAMERA_NAME);
			String did = (String)mapItem.get(ContentCommon.STR_CAMERA_ID);
			String user = (String)mapItem.get(ContentCommon.STR_CAMERA_USER);
			String pwd = (String)mapItem.get(ContentCommon.STR_CAMERA_PWD);
			int type = (Integer)mapItem.get(ContentCommon.STR_CAMERA_TYPE);
			int status = (Integer)mapItem.get(ContentCommon.STR_PPPP_STATUS);
			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(ContentCommon.STR_CAMERA_NAME, name);
			map.put(ContentCommon.STR_CAMERA_ID, did);
			map.put(ContentCommon.STR_CAMERA_USER, user);
			map.put(ContentCommon.STR_CAMERA_PWD, pwd) ;
			map.put(ContentCommon.STR_CAMERA_TYPE, type);
			map.put(ContentCommon.STR_PPPP_STATUS, status);
			
			return map;
		}
	}

	public boolean delCamera(String did) {		
		// TODO Auto-generated method stub
		Log.d(LOG_TAG, "Call delCamera");
		synchronized(this){
			int size = listItems.size();
			int i;
			for(i = 0; i < size; i++){
				String strDID = (String)listItems.get(i).get(ContentCommon.STR_CAMERA_ID);
				if(did.equals(strDID)){
					listItems.get(i).clear();
					listItems.remove(i) ;
					return true;
				}
			}		
			return false;
		}
	}

	public boolean UpdateCamera(String oldDID, 
			String name, String did, String user, String pwd) {
		// TODO Auto-generated method stub
		synchronized(this){
			int size = listItems.size();
			int i;
			for(i = 0; i < size; i++){
				Map<String, Object> mapItem = listItems.get(i);
				String strDID = (String)mapItem.get(ContentCommon.STR_CAMERA_ID);
				if(oldDID.equals(strDID)){
					mapItem.put(ContentCommon.STR_CAMERA_NAME, name);
					mapItem.put(ContentCommon.STR_CAMERA_ID, did);
					mapItem.put(ContentCommon.STR_CAMERA_USER, user);
					mapItem.put(ContentCommon.STR_CAMERA_PWD, pwd) ;
					mapItem.put(ContentCommon.STR_CAMERA_TYPE, ContentCommon.PPPP_DEV_TYPE_UNKNOWN);
					mapItem.put(ContentCommon.STR_PPPP_STATUS, ContentCommon.PPPP_STATUS_UNKNOWN);
					return true;
				}
			}
			return false;
		}
	}

	public boolean UpdateCameraImage(String did, Drawable drawable) {
		// TODO Auto-generated method stub
		synchronized(this){
			int size = listItems.size();
			int i;
			for(i = 0; i < size; i++){
				Map<String, Object> mapItem = listItems.get(i);
				String strDID = (String)mapItem.get(ContentCommon.STR_CAMERA_ID);
				if(did.equals(strDID)){
					//System.out.println("UpdateCameraImage i: " + i) ;
					mapItem.put(ContentCommon.STR_CAMERA_SNAPSHOT, drawable);
					return true;
				}
			}
			return false;
		}
	}
	
}