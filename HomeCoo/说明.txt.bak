2015.11.22
1、LoginActivity 
   用户名和密码合法性校验   VerifyUtils.matchAccount(username)
   内网用户连接登录    intranetUserLogin(String gatewayId,String mpassword)
   外网用户连接登录    outernetUserLogin(String name,String pwd)
   网络连接失败回调前台显示

2015.11.24
1、RegisterActivity
    public boolean isUseableLogincode(String username)    验证账号是否已注册

    public User getUser(String username,String password)  根据用户名和密码返回对应user对象

2、BaseActivity
   
    protected void initExitDialog()      /**退出对话框**/

2015.11.25

网关设置
房间管理

2015.11.26

用户房间关联表
UserSpaceDao

     public List<SpaceType> lookupSpacesForUser(User user)       //根据用户查找该用户拥有的房间
     private PreparedQuery<SpaceType> makePostsForUserQuery() 

2015.11.27

DevdtoDao    //设备的查删改
      public List<DevDTO> devListBygwId(String  gatewayId)      根据网关号查找对应的设备
HomeActivity
     showSpaceInfo(SystemValue.userid);    //本地初始化用户房间列表
     gateWay=new GateWayDao(HomeActivity.this).getGateWay(SystemValue.userid);    //初始化用户的第一个网关

UserSpaceDao
    public boolean isUseableSpace(SpaceType space,int userid)     //判断用户的id是否在某空间名称对应的用户关联表中

2015.11.28
DevdtoDao
   public List<DevDTO> switchListBygwId(String  gatewayId,int wideType)   //根据网关号,大类号加载设备列表
DeviceSwitchActivity    //开关页面
DeviceSockActivity      //插座页面


2015.11.29
SpaceDevicesActivity
      /*************初始化SpaceDeviceViewPages*********************/
      private void initSpaceDeviceView(LayoutInflater inflater,int viewsnum) {
        pageViews = new ArrayList<View>();  
        spaceViews = new View[viewsNum]; 
        mgvDevices=new GridView[viewsNum];
        
      for (int i = 0; i < viewsnum; i++) {
           spaceViews[i]=inflater.inflate(R.layout.item_space_devices, null);
           mgvDevices[i]=(GridView)spaceViews[i].findViewById(R.id.gv_space_devices);
           pageViews.add(spaceViews[i]);
	   	}
        //初始化第一个房间的设备信息
        showSiteInfo(SystemValue.userid,1);
        deviceAdpter=new SwitchsAdapter1();
        mgvDevices[1].setAdapter(deviceAdpter);
	   }
	   
	   /*************刷新当前房间设备列表*********************/
	   	 case 0x129:
	   		    deviceAdpter=new SwitchsAdapter1();
	   	    	mgvDevices[selectIndex].setAdapter( deviceAdpter);
	   		 }
	   

        //初始化指引小圆点图片数组
        initGuidImageView(viewsNum);
     
2015.11.30
DeviceSwitchActivity
1、显示
   外网：直接从服务器读取数据经过码表转换（on-1,off-0,pk-00）存入本地数据库
   内网：从本地数据库读取数据
2、控制
   外网：控制命令经过码表转换（1-on,00-pk）发送到服务器
   内网：控制命令经过码表转换（1-64,0-00）发送网关
   
GatewayDao
   新添加网关和IP
   更新网关和IP
   
2015.12.1
SpaceDevicesActivity   DeviceSockActivity  DeviceSwitchActivity  DeviceWindowActivity
1、加载
   判断网络状态为内网：从本地数据库加载空间列表；根据空间Id从本地加载设备
   判断网络状态为外网：从外网服务器加载空间列表，将空间列表同步到本地数据库；根据空间Id从外网服务器加载设备，将设备列表同步到本地数据库。
2、控制
   判断网络状态为内网：将控制命令转换为报文发送到网关，并将设备的状态更新到本地数据库
   判断网络状态为外网：将控制命令发送到外网服务器，并将设备的状态更新到本地数据库   
   
2015.12.03
SceneModelActivity

		private void themeExecuteLoop()      // 循环发送情景表中的关联设备状态      
		
2015.12.05
GatewayManegeActivity
网关添加    addGatewayDialog()
网关修改IP  updateGatewayIPDialog()
网关删除    showDeleteDialog()

修复弹出对话框，在点击确定按钮后先对输入的内容进行校验。

/%%%%%%%%%%%%%%%%%%%%%%%%%%%/
SpaceManegeActivity
修改房间名称（服务器端是根据主键来修改的吗【一个用户改房间则所有用户的房间名称都修改了】，如果返回新主键则以前设置的房间无效）

2015.12.06
SocketService
【后台】内网网关添加或者更新本地数据库devdto的状态
WebPacketUtil.addOrUpdateDeviceToLocalSql(recivePacket);

【情景模式】
DeviceSockActivity   
				getThemeId(position); //根据外网服务器返回的themeid,然后添加情景到本地数据库中;情景的devid为2222
SceneManegeActivity
       addTheme(scenename);   在本地数据中添加情景，themeid自动生成；情景的devid为8888
       
2015.12.07
【网络切换】
BaseActivity
       netWorkSwitch();     //判断是否已绑定网关id,然后启动SocketService  
       
【修复toggleButton初始化setchecked触发事件】
	holder.tgBtn4.setOnClickListener(new OnClickListener() {
					
					@Override
					public void onClick(View v) {
						if(holder.tgBtn4.isChecked()){
							cmdControl(holder,position,4,ON);
						}
						else{
							cmdControl(holder,position,4,OFF);
						}
					}
				});
	}
【SeekBar滑动停止发送状态】
setOnSeekBarChangeListener()

2015-12-08
集成摄像头开发包前

2015.12.12
1、集成可视对讲
2、防区设置 DefenceAreaSet
   防区管理 DefenceArea
   
2015.12.15
1、适配登录，主页导航，设置等图片
2、网关设置：添加，获取网关到服务器。

2015.12.16
DevDTO 添加devname 属性
themestate 修改 id为devid
SpaceType bz属性填充gatewayId

2015.12.17
摄像头和可视对讲同时集成在HomeCoo
1、修复IpCameraDemo和DoorBell 库文件冲突(libffmpeg.so和libavi_utils.so功能相同)
DoorBell 删除libffmpeg.so库引用
IpCameraDemo 删除libavi_utils.so库引用
2、修复library project关联到主工程后找不到id
在library project工程中将此id所在xml文件重命名

2015.12.18
GatewayManegeActivity  
外网：从服务器加载userid，gatewayid,在本地数据库查找存在后填充IP,新网关填充默认IP,不存在该网关则IP为null
      如果本地设备已存在，
内网：根据userid加载
【添加网关】先添加到本地再同步到服务器
【更新网关IP】在本地数据库更新

SpaceManegeActivity
同网关操作

DeviceManegeActivity
外网：initDev更新设备
内网：更新，删除设备

SceneManegeActivity
【添加或更新theme】根据userid和themename从服务器更新本地themeid或者添加新情景（parseAndSaveThemelist）
【情景设置内网】

2015.12.20
HomeActivity
1、登录系统后，默认填充userid对应的第一个网关id为SystemValue.gatewayid

SpaceManegeActivity , SpaceDevicesActivity
1、外网情况下，需从外网直接获取空间列表。
2、内网情况下，需从本地数据库获取空间列表


2015.12.21
DeviceSensorActivity
【联动情景id生成】
   if (NetValue.netFlag==NetValue.INTRANET) {
					    	getThemeIdFromServer(alertTheme,devname);    //insertOrUpdateAlertTheme默认alettype为1
						}else if (NetValue.netFlag==NetValue.OUTERNET) {
							addAThemeToLocalSql(alertTheme);
							Intent sceneSetIntent=new Intent(DeviceSensorActivity.this,SceneSetActivity.class);
							sceneSetIntent.putExtra("themeid",aleThemeid);
							sceneSetIntent.putExtra("themename",devname);
							startActivity(sceneSetIntent);
						}
						
【判断并处理紧急情景】 
 	 judgeAndExcuteAlerTheme(recivePacket);
 	 
2015.12.22
DefenceAreaSetActivity
1、根据radiobutton更新theme表中的themestate 1：室内 2：室外
      insertOrUpdateAletTheme(1,position);   //alerttype 1室内   
      
2015.12.23
1、手机验证

2015.12.25
DeviceWeikongActivity
1、风扇的开关状态

LoginActivity
1、本地登录成功后获取所有设备的状态
2、外网登录成功，本地有name,pwd更新userid;本地无则添加user;

【切换网络】 netWorkSwitch(TextView textview)
1、socketService.sentPacket(authPacket);   //发送请求认证报文到网关
2、socketService.sentPacket(devAllPacket);   //发送请求所有设备状态

2015.12.26
DefenceAreaActivity 
    外网撤布防执行：
      excuteAlertTheme
    
    内外撤布防执行：
【室内的撤布防异步】
      
      
SceneModelActivity
   //初始化默认的四个情景
 		SystemValue.setInitThemeList();
 		
 		
2015.12.27
socketservice 情景学习
用户选择多个房间    
        timerhandler.post(addscenestaterunnable);
将房间内的设备状态添加到对应的themeid     

2015.12.28
SocketService
【修复read阻塞】  
   Thread inputThrea=new Thread(new Runnable()
    inputThrea.start();
LoginActivity
【修复验证通过对话框不消失】
  点击确定对话框消失，如果验证不通过，对话框再显示
  
2015.12.30
1、onCreate()
   创建socketService,
   开启hander，  mHandler = new Handler(thread.getLooper());
   
2、socketConnect()
     NetValue.isocketConnet= true;  //socket已经连接
     NetValue.inputflag=true;       //打开输入流
     inputThrea.start();       //启动接收线程
   
2、发送时，将发送线程扔进hander
     mHandler.post(sentPacketRunnable);//将线程post到Handler中
     开启输入流（inputflag=true）
     
3、在输入流中接收数据
    Thread inputThrea=new Thread(new Runnable() 
    
【备注】入网流程31号再理

2015.12.31
LoginActivity
【记住用户名和密码】   remenberNameAndPassword(); 

【android业务处理逻辑】
UserRegisterActivity  服务器端注册成功后添加到本地数据库

LoginActivity   
【本地连接】  先进行本地连接，填充userid
             1、查找logincode和pwd对应的网关，若存在填充内网连接要素为系统全局变量(gatewayid,wgpwd,IP)，
             2、判断是否通过内网认证（!NetValue.socketauthen），未通过认证，则建立socket连接并启动认证（socketService.socketConnect()）

【远程连接】  
             1、  查找logincode和pwd对应的网关为null,切换到外网登录
             2、本地连接抛出异常（ip错误等）切换到外网服务器连接(logincode,password),验证成功，存储logincode,password,userid到本地；
                                                          如果本地存在logincode，password则更新userid；
                                                          填充服务器返回的userid为SystemValue.userid；
               

2016.01.01
GatewayManegeActivity 
【激活网关】   [添加按钮，手动同步本地网关到数据库]
     提示用户：必须在连内网的情况下，才能激活（添加）网关；
     1、添加网关输入wgid,wgpwd,ip,本地认证成功返回0，添加网关信息到服务器（目前userid和wgid）
     2、socketservice中认证成功会请求所有设备状态  getDevAllStatePacket
【更改网关IP】
     1、更改本地数据库网关IP
     2、填充新网关IP为   NetValue.LOCAL_IP=gatewayIP;  //更新IP时立即启用
【删除网关】
     1、删除本地网关对象
     2、删除服务器端的（userid和wgid）
【修改网关密码】    
     1、用户点击修改网关密码，检查是否通过内网认证（NetValue.socketauthen），提示用户切换本地连接进行内网认证。
     2、内网认证通过，发送修改密码报文（updatePasswordPacket）

/***************************************************************/     
SocketService 网络连接、认证、发送、接收流程
【建立socket连接】socketConnect()
     1、new socket对象；
     2、判断接收线程是否启动，启动接收线程inputThread.start();
     3、发送认证报文，判断认证结果（datatype==NetValue.DATA_ACK_AUTH）
        认证通过，	NetValue.socketauthen=true;  启动心跳包线程；
        认证未通过，NetValue.socketauthen=false;  关闭socket，socketClose();
        
【网络切换】   netWorkSwitch(socketService,textview)
/***************************************************************/ 

SpaceManegeActivity
【添加空间】  addNewSpaceToServer
     1、先添加到本地
     2、然后添加到服务器
     
2016.01.04
SceneManageActivity
【添加情景】  addTheme()
     1、先添加到外网，成功后返回对应的themeid,
     2、同步服务器成功返回的theme到本地

【防暴力点击】   BaseActivity
    public abstract class ClickEvent implements OnClickListener
    
2016.01.06
【修复理listview点击错乱】  DeviceSwitchActivity ,DeviceSockActivity ,DeviceWindowActivity
    1、  showViewByDevtype(holder,devdto,position); 
    2、  switchViewOnClick(holder,position);
           holder.tgBtn1.setOnCheckedChangeListener(new CheckClickEvent()
           
【外网定时刷新】DeviceSwitchActivity ,DeviceSockActivity ,DeviceWindowActivity
     timerhandler.postDelayed(timerrunnable, 5000); 
     
     
2016.01.07
【网关同步】  GatewayManegeActivity
    1、  gatewayRefresh()
【同步空间】  SpaceManegeActivity
    1、  sysSpaceToServer()
    
【请求所有设备】  
    1、 外网 ：showDevdtoFromServer(SystemValue.userid);
    2、 内网： SocketPacket devAllPacket=WebPacketUtil.getDevAllStatePacket(SystemValue.gatewayid);
			         devService.sentPacket(devAllPacket);   //发送请求所有设备状态
			         
2016.01.07   9:40
【情景管理】
   1、必须添加情景成功了，返回服务器返回的themeid.然后添加情景到本地服务器。
【情景联动设置】
   1、themestate ，（themeid,id,devid,devstate）
注意：在进入设备管理时,根据devid填充themestate中的id
    
		new ThemeStateDao(null).updateIdByDevid(devdto);  //根据devid更新themestate表中的id
    
【修复doorbell找不到.so文件退出】
   	System.loadLibrary("ffmpeg");
		System.loadLibrary("avi_utils");
		System.loadLibrary("object_jni");
		
2016.01.08
【温湿度】
    1、外网       
      String strdata=devTempHumi.getDevState();            
      String[] strTempHumi=strdata.split("p");        
      double dTemp=Double.valueOf(strTempHumi[0])/100;
      tvtemprature.setText("温度："+dTemp+"℃");      
      tvhumidity.setText("湿度："+strTempHumi[1]+"%");
    2、内网
       int temp=DataConvertUtil.byte2int2(bytetemp);        
       int humi=DataConvertUtil.byte2int2(bytehumi);
       String strtemp=Integer.toString(temp);       
       String strhumi=Integer.toString(humi);       
       strhex=strtemp+"p"+strhumi;      
       
2016.01.09
【数据库更新注意】  
     onCreate  里面的表格不能屏蔽   
【传感器类报警】   
     if (NetValue.isAcceptAlert)  //屏蔽短时间类连续上报报警状态
     
2016.01.12   10.55  初版
devsiwtch   sensorset的listview 缓存加载，点击定位

2016.01.12   14.01
devicespace  listview 缓存加载，点击定位

2016.01.12   20.41
devsiwtch    listview  缓存加载，每页加载10项，点击定位准确

2016.01.13
【修改七寸屏版本】

2016.01.13  22.54
1、外网情况下，
    else if (NetValue.netFlag==NetValue.OUTERNET) {
			tvbttomNetwork.setText("远程");    //任务栏显示网络状态
			//访问服务器线程  //【定时线程步骤2】
			timerhandler.post(timerrunnable); 
		} 
		
2016.01.14
1、添加双控开关
    getNameByThemeDevstate
    
    
2015.01.15
同步七寸屏
  1、联动设置
  2、防区管理   weikong2
  
3、listview 缓存机制，屏蔽重复显示   【spacedevices】
     if (NetValue.netFlag==NetValue.INTRANET) {
        		//从本地数据库加载房间列表
            	 devlist.clear();
       		     gvlistAll.clear();
            	List<DevDTO> allDevList=new ArrayList<DevDTO>();
     		      allDevList=new DevdtoDao(SpaceDevicesActivity.this)
                        .deviceListBySpaceId(SystemValue.gatewayid,spaceid);
     		         gvlistAll=WebPacketUtil.findSpaceDevicesFromDevicesAll(allDevList);  
     		         
     		        //异步进程更新界面
     		   	      Message msg=new Message();
     		   	      msg.what=0x129;
     		   	      handler.sendMessage(msg);           
    		}else if (NetValue.netFlag==NetValue.OUTERNET) {		
    			//根据用户名从外网初始化房间 列表	 
    			  findDevBySpaceFromOuternet(SystemValue.userid,spaceid);
    		}
   
///////////////////////////////////////////////////////////
         	 LIST_COUNT=gvlistAll.size();   //实例化所有设备的总数
	   			 loadState=LOAD_STATE_IDLE;     //记录加载状态
	   		   deviceAdpter.onListener(SpaceDevicesActivity.this);
	   	     mgvDevices[selectIndex].setAdapter( deviceAdpter);
	   	     
4、情景点击位置，填充为全局变量
【获取当前启动情景位置】    
       vPsotion = preferences.getInt("scenepoint", -1);       //获取已经启动的scenepoint
				//刷新情景当前点亮图标
				if (vPsotion==position) {
					holder.tgSceneSwitch.setChecked(true);
				}else {
					holder.tgSceneSwitch.setChecked(false);
				}
				
【填充当前启动情景位置】
       //填充当前点击位置填充全局变量
				  vPsotion=position;  
				  editor.putInt("scenepoint", position);
				  editor.commit(); 
				  
2016.01.18
【环形接收byte数组】   putBytes(recivebuf,len);   //将接收的字节报文放回bytebuffer
【定时解析报文】       decodePacketFromByteBuffer()
【开启新发送报文线程】
          //socket连接，定时解析报文线程
	        HandlerThread thread = new HandlerThread("MyHandlerThread");
	        thread.start();//创建一个HandlerThread并启动它
	        mHandler = new Handler(thread.getLooper());
	        //发送报文线程
	        HandlerThread sentThread = new HandlerThread("SentHandlerThread");
	        sentThread.start();//创建一个HandlerThread并启动它
	        sentHandler=new Handler(sentThread.getLooper());  //发送数据线程

1、scenesetActivity  
【修复设备状态设置后，checkbox状态显示】
     themeStateList.add(themeState); //添加到缓存themestate
【实时更新缓存themestate中设备状态】
     addOrUpdateThemestateToServer(themeId,device);
     
2、SpaceDevicesActivity
【devlist局部刷新】
  refreshDevlistByGvlistAll(); //根据外网返回的gvlistAll刷新devlist
【切换房间时清空devlist】
  public void onPageSelected(int arg0)
  //从本地数据库加载房间列表
      devlist.clear();
  		gvlistAll.clear();
  		
3、DefenceAreaSetActivity
   防区设置时，手机必须连到外网，根据外网返回的紧急情景themeid，添加到本地theme表中
     
2016.01.19
DefenceAreaActivity
  1、室内，室外布防撤防
  
【DevDTO】pdevid （本地主键），id（服务器返回并填充）

SpaceManegeActivity
 【SpaceType】添加空间时，服务器返回spacetypeid ,然后添加到本地
              更新/删除空间先从服务器删除后，从本地删除
              
SceneManegeActivity
 【添加情景】 addSceneDialog();   //添加新情景，先添加到服务器，然后添加到本地
 【删除情景】 deleteThemeToOuternet(theme,position);   //删除情景，先从服务器删除，然后删除本地情景
  //取消更改情景名称功能，容易乱掉
 【底层上报四路情景】 四路情景（202）上报后，在SceneManegeActivity的缓存themeList添加四个默认的情景，
                     用户点击情景设置后，由服务器生成themeid，插入到theme表中
 【底层上报双控开关】 双控开关（204）上报后，在SceneManegeActivity的缓存themeList添加（位置+双控开关）情景（多个）
                     用户点击情景设置后，由服务器生成themeid，插入到theme表中
  
DefenceAreaSetActivity
  【防区设置】先从服务器themeid,然后添加到本地theme表中
  
SocketService1
  【报警对话框消失】其它客户端对设备进行撤防后，内网情况下手机端收到设备返回的撤防成功消息后将报警对话框消失
 
   
2016.01.20
SceneSetActivity
 【修复chechbox取消后显示】chebox取消选中后，从themeStateList删除对应设备
	 deleteThemestateBythemeStateCache(device,themeState);    //从本地缓存中themestate删除设备状态（2）
	 
 /*****每次修改ipcamdemo后先cleanipcamdemo然后clean主工程HomeCOO*********/
AddCameraActivity
【更改摄像机名称】   	new CameraDao(AddCameraActivity.this).updateCameranameByCamerano(mCamera);
【删除摄像机】        new CameraDao(AddCameraActivity.this).deleteCameraByCamerano(myCamera);

2016.01.21
SceneModelActivity
   addDefaultSceneByThemename(theme);  //默认情景关联所有硬件情景开关
   
    if (theme.getThemetype()==1) {  //硬件情景开关
    else if (theme.getThemetype()==2) {    //双控开关
   
2016.01.22    14:26     同步7寸屏版本
SocketService1
  1、 new ThemeStateDao(null).deleteAllByThemeid(stuThemeid);    //删除当前情景id下已经设置的themestate
  2、addDefaultSceneByThemename    // 添加硬件情景开关themestate到默认的情景
   
  3、getNameAndExecuteByThemeDevstate     //底层触发双控开关，执行双控情节；情景学习根据devstate获取情景名称和themeid
      if (devtype==204) {   //双控开关  
      
  4、情景模式加载情景
     findCustomThemeFromThemesAll(List<Theme> allLists)   //查找情景类型为 
           if ((themetype==1)||(themetype==2)||(themetype==4))   //实体四路情景，2路情景，自定义情景
           
2016.01.23
WebPacketUtil
   themestate=convertThemestateFromServer(themestate);//转换服务器的themestate到本地
   
SceneModelActivity
    //更新本地数据库的设备状态，不等底层返回
	  new DevdtoDao(null).updateDevByDevIdAndGwId(devdto);
	
SceneSetActivity	  
      spaceViews[5]=inflater.inflate(R.layout.item_space_devices, null);  //微控
             mgvDevices[3]=(GridView)spaceViews[5].findViewById(R.id.gv_space_devices);
      spaceViews[6]=inflater.inflate(R.layout.item_space_devices, null);     //音乐
  	         mgvDevices[4]=(GridView) spaceViews[6].findViewById(R.id.gv_space_devices);
  
【摄像头】
NewCameraActivity
     		Intent intent = new Intent();  //Itent就是我们要发送的内容
        intent.putExtra("data","refreshCamera");  
        intent.setAction("finish");   //设置你这个广播的action，只有和这个action一样的接受者才能接受者才能接收广播
        sendBroadcast(intent);   //发送广播
        
        
2016.01.24
【修复手机返回键记不住密码】
       public boolean onKeyDown(int keyCode, KeyEvent event)
       
【DeviceSwitchActivity】【DeviceWeiKongActivity】   外网返回本地数据库加载   
     WebPacketUtil.parseSoaptoDevicelist(rstJsonArray);
			  gvlistAll=new DevdtoDao(DeviceSwitchActivity.this)
              .switchListBygwId(SystemValue.gatewayid,SystemValue.zhaoming); 

【SpaceManegeActivity】【SceneSetActivity】
    屏蔽同步
    
【SocketService1】
   报警震动和提示音
   
2016.01.27
【WebPacketUtil】
     convertThemestateFromServer()     //安防类情景themestate原码返回
     
2016.02.20
【SocketService】
      //扫描局域网内的网关ip
			NetTool ntNetTool=new NetTool(null);
			ntNetTool.scan();
			
【GatewayManegeActivity】
    //适配网关ip线程
      HandlerThread searchIpThread = new HandlerThread("SearchIpThread");
      searchIpThread.start();//创建一个HandlerThread并启动它
      searchIpHandler=new Handler(searchIpThread.getLooper());  //发送数据线程
      searchIpHandler.post(searchIpRunnable);

2016.02.21
      timmertask 定时
      

2016.02.23
【SpaceDevicesActivity 】
 //底层数据局部刷新
 case DEVMSG:
	    				
			SocketPacket socketPacket=(SocketPacket) tranObject.getObject();
			String devid=socketPacket.getDevId();
			String devstate=socketPacket.getData();
			
			DevDTO devDTO=null;
			  int vposition=-1;
		        // 进行数据对比获取对应数据在list中的位置
		      for(int j=0;j<devlist.size();j++)
		        { 
		    	    String strdevid=devlist.get(j).getDevId();
		            if (devid.equalsIgnoreCase(strdevid))
		            {   System.out.println("底层设备状态更新===="+strdevid);
		                devDTO=devlist.get(j);
		                devDTO.setDevState(devstate);
		                vposition=j;
		                //  异步进程更新界面
    		 		    Message msg=new Message();
    		            msg.what=0x009;
    		            msg.arg1=vposition;
    		            msg.obj=devDTO;
    		            handler.sendMessage(msg);
		                break;
		            }
		          }
        break;
        
 
     
     
 【SocketService1】
  //修复socket接收不稳定
  //socket连接后，启动接收线程
		   Thread inputThread=new Thread(new Runnable() {
				public void run() {
			    while(true)
				{
			    	if(NetValue.sIsConneted){
	 				    try {
							input=socket.getInputStream();
							  //判断并验证报文
			 				  readAndconvertInputStream(input);
						} catch (IOException e) {
							NetValue.sIsConneted=false;
							System.out.println("捕获到socket已经关闭");
							e.printStackTrace();
						}
				   }
				 }
				}
			 });
			 
			 
2016.02.24
【SocketService1】
 1、扫描局域网ip和适配网关ip
    //扫描局域网内的网关ip
			NetTool ntNetTool=new NetTool(null);
			ntNetTool.scan();
			
			 //适配网关ip线程
      HandlerThread searchIpThread = new HandlerThread("SearchIpThread");
      searchIpThread.start();//创建一个HandlerThread并启动它
      searchIpHandler=new Handler(searchIpThread.getLooper());  //发送数据线程
      searchIpHandler.post(searchIpRunnable);
	        
	 2、适配成功后，将对应网关的ip地址更新到数据库
	 //更新数据库中局域网内对应网关的ip
		        	   GateWay mgateWay=new GateWayDao(SocketService1.this).getFirstGateWay(SystemValue.userid);
		        	   if (mgateWay!=null) {
		        		   //更新设备信息到数据库
		        		   mgateWay.setIp(ip);
		        		   System.out.println("==userid=="+SystemValue.userid+"======="+mgateWay.getIp());
			             new GateWayDao(SocketService1.this).updateGateWayByWgid(mgateWay);
					   }       
	  
	  
【GatewayManegeActivity】
 1、刷新并更新网关的ip
 public void gatewayRefresh()
 
 2、 屏蔽本地网络连接失败提示
 NetValue.callbackflag=false;  
 
 3、本地网络连接失败提示
 NetValue.callbackflag=true;   
 
 
 【SpaceDevicesActivity】
 1、本地网络，局部数据刷新
  case 0x009:
	   			 int index = msg.arg1;  
		            DevDTO devdto = (DevDTO) msg.obj; 
		            int firstVisible =  mgvDevices[selectIndex].getFirstVisiblePosition();  
		            int lastVisible =  mgvDevices[selectIndex].getLastVisiblePosition();  
		            if (index >= firstVisible && index <= lastVisible) {
		            	//获取到index对应的holder
		            	Holder holder = (Holder) ( mgvDevices[selectIndex] 
		                        .getChildAt(index - firstVisible).getTag());  
		            	  showViewByDevtype(holder,devdto);
		            }  
	   			  break;
  
  
2016.02.25
【SocketService1】
 1、获取手机本地的ip地址
  //获取IP前缀
	  public String getLocAddrIndex(){
	     
		String str = getLocAddress();
	     
	    if(!str.equals("")){
	      return str.substring(0,str.lastIndexOf(".")+1);
	    }
	     
	    return null;
	  }
	  
【NetTool】
 1、搜索手机所在网段的本地手机IP地址
   //获取本地ip地址
	  public String getLocAddress(){
	    String ipaddress = " ";
	    try {
	      Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces();
	      // 遍历所用的网络接口
	      while (en.hasMoreElements()) {
	        NetworkInterface networks = en.nextElement();
	        // 得到每一个网络接口绑定的所有ip
	        Enumeration<InetAddress> address = networks.getInetAddresses();
	        // 遍历每一个接口绑定的所有ip
	        while (address.hasMoreElements()) {
	          InetAddress ip = address.nextElement();
	          if (!ip.isLoopbackAddress()
	              && InetAddressUtils.isIPv4Address(ip.getHostAddress())) {
	            ipaddress = ip.getHostAddress();
	          }
	        }
	      }
	    } catch (SocketException e) {
	      Log.e("", "获取本地ip地址失败");
	      e.printStackTrace();
	    }
	    System.out.println("本地手机IP:" + ipaddress);
	     
	    return ipaddress;
	  }



     
      
				
	


